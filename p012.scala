/**The sequence of triangle numbers is generated by adding the natural numbers. So the
7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

def primeFactors(n: Long): List[List[Int]] = {
  def test(n: Long, k: Int): List[Int] =
    if (n == 1) Nil
    else if (n % k == 0) k :: test(n/k, k)
    else test(n, k+1)
  test(n, 2).groupBy(x => x).values.toList
}

def numDivisors(n: Int): Int = {
  if (n == 1) 1
  else (primeFactors(n) map (_.length + 1)).product
}

def triangleNumbers (n: Int) = (n*n + n) / 2

val ans = (Iterator.from(1) map triangleNumbers filter (numDivisors(_) > 500)).next

println(ans)
